<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netcoreapp2.1</TargetFramework>
    <SignAssembly>true</SignAssembly>
    <Version>2.0.0</Version>
    <Authors>Val Melamed</Authors>
    <Company>vm</Company>
    <Product>vm.Aspects</Product>
    <Copyright>Copyright Â© vm 2013-2018</Copyright>
    <PackageLicenseUrl>https://github.com/vmelamed/vm/blob/master/LICENSE</PackageLicenseUrl>
    <PackageProjectUrl>https://github.com/vmelamed/vm/tree/master/Aspects/Diagnostics</PackageProjectUrl>
    <NeutralLanguage>ar-TD</NeutralLanguage>
    <Description>Features:
            * The dump output is separated from the targeted dump media by the familiar TextWriter interface
            * The programmer can dump the value of any type of object: primitive and enum types (including those marked with FlagsAttribute), custom classes, struct-s, collections, etc.
            * For complex type objects (classes and structs) the dumper outputs the names and the values of the properties
            * The dump is recursive: the complex members of the dumped object are dumped indented
            * Dumps the elements of sequences (arrays, lists, dictionaries, etc.)
            * Handles circular references
            * The developers can easily customize various aspects of the dump by using an attribute (DumpAttribute) on the classes and their members, such as:
                - the order in which the properties are dumped
                - formatting of the property names and/or values
                - suppressing the dump of some uninteresting properties
                - masking the values of sensitive properties (e.g. PII)
                - the depth of the recursion into complex members
               - the maximum number of dumped elements of sequence properties
            * The dumper picks the customization attributes also from buddy classes declared with MetadataTypeAttribute
            * Even if the class doesn't have any attributes, the programmer can still pass a metadata class as a separate parameter to the dumping method. This allows for control over the dump of BCL and third party classes
            * Built and tested with .NET 4.6.2, 4.7.1, 4.7.2
            For more information see the documentation at https://github.com/vmelamed/vm/blob/master/Aspects/Diagnostics/ObjectTextDumper.md.</Description>
    <RootNamespace>vm.Aspects.Diagnostics.ObjectTextDumper</RootNamespace>
    <AssemblyName>vm.Aspects.Diagnostics.ObjectTextDumper</AssemblyName>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <DocumentationFile>bin\Debug\netcoreapp2.1\vm.Aspects.Diagnostics.ObjectTextDumper.Core.xml</DocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="..\..\..\Common Items\AssemblyInfo.global.cs" Link="Properties\AssemblyInfo.global.cs" />
  </ItemGroup>

  <ItemGroup>
    <Content Include="..\..\..\Common Items\Dictionary.xml" Link="Dictionary.xml" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\..\Common Items\vm.snk" Link="vm.snk" />
    <None Include="..\..\..\Common Items\vmAllRules.ruleset" Link="vmAllRules.ruleset" />
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Properties\" />
  </ItemGroup>

</Project>
