<#@ template language="C#" debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Xml" #>
<#@ Assembly Name="System.Xml.Linq" #>
<#@ Assembly Name="EnvDTE" #>
<#@ Assembly Name="EnvDTE80" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="sourcePathName" type="System.String" #>
<#@ parameter name="targetPathName" type="System.String" #><# 

    var dte = GetEnvDte();

    var sourceProjectItem = dte.Solution.FindProjectItem(sourcePathName);
    var sourceCodeModel   = sourceProjectItem.FileCodeModel;

    CodeClass2 sourceClass;
    CodeInterface2 sourceInterface;
    CodeNamespace sourceNameSpace;

    if (!FindFirstClassOrInterface(sourceCodeModel.CodeElements, out sourceClass, out sourceInterface, out sourceNameSpace) || 
        sourceInterface == null)
        throw new InvalidOperationException("Could not find an interface to generate its asynchronous version.");

    var sourceMethods    = sourceInterface.Children.OfType<EnvDTE.CodeFunction>().FirstOrDefault();

    bool soapNamespaceIsQuoted;
    bool soapNameIsQuoted;
    string soapNamespace;
    string soapName;

    WriteUsings(sourceCodeModel.CodeElements, "System.Threading.Tasks");

    WriteLine("");
    WriteLine("namespace {0}", sourceNameSpace.FullName);
    WriteLine("{");
    PushIndent("    ");

    WriteDoc(sourceInterface.DocComment);
    
    WriteInterfaceAttributes(sourceInterface, out soapNamespace, out soapNamespaceIsQuoted, out soapName, out soapNameIsQuoted);

    WriteInterfaceDeclaration(sourceInterface);
    WriteLine("{");
    PushIndent("    ");

    var first = true;

    foreach (var method in sourceInterface.Members.OfType<CodeFunction>())
    {
        if (first)
            first = false;
        else
            WriteLine("");
        WriteMethod(method, soapNamespace, soapNamespaceIsQuoted, soapName, soapNameIsQuoted);
    }

    PopIndent();
    WriteLine("}");

    PopIndent();
    WriteLine("}");
#><#+

    DTE2 GetEnvDte()
    {
        var hostServiceProvider = (IServiceProvider)Host;

        if (hostServiceProvider == null)
            throw new NotSupportedException("Host does not support IServiceProvider.");

        var dte = hostServiceProvider.GetService(typeof(DTE)) as DTE2;

        if (dte == null)
            throw new NotSupportedException("Could not retrieve EnvDTE.DTE2 from host.");

        return dte;
    }

    bool FindFirstClassOrInterface(
        CodeElements codeElements,
        out CodeClass2 sourceClass,
        out CodeInterface2 sourceInterface,
        out CodeNamespace sourceNameSpace)
    {
        sourceClass     = null;
        sourceInterface = null;
        sourceNameSpace = null;

        return DoFindFirstClassOrInterface(
            codeElements,
            ref sourceClass,
            ref sourceInterface,
            ref sourceNameSpace);
    }

    bool DoFindFirstClassOrInterface(
        CodeElements codeElements,
        ref CodeClass2 sourceClass,
        ref CodeInterface2 sourceInterface,
        ref CodeNamespace sourceNameSpace)
    {
        foreach (CodeElement2 element in codeElements)
        {
            sourceInterface = element as CodeInterface2;

            if (sourceInterface != null)
                return true;

            sourceClass = element as CodeClass2;

            if (sourceClass != null)
                return true;

            var nameSpace = element as CodeNamespace;

            if (nameSpace != null)
                if (DoFindFirstClassOrInterface(nameSpace.Children, ref sourceClass, ref sourceInterface, ref sourceNameSpace))
                {
                    if (sourceNameSpace == null)
                        sourceNameSpace = nameSpace;                    
                    return true;
                }
        }

        return false;
    }

    // Copies all using directives from the code model to the target and appends using-s for a set of required namespaces.
    void WriteUsings(
        CodeElements codeElements,
        params string[] requiredNamespaces)
    {
        bool[] writtenNamespaces = new bool[requiredNamespaces.Length];

        foreach (var u in codeElements.OfType<CodeImport>())
        {    
            WriteLine("using {0};", u.Namespace);
            requiredNamespaces.Where((ns,i) => writtenNamespaces[i] |= ns==u.Namespace).Count();
        }
        
        for (var i=0; i < writtenNamespaces.Length; i++)
            if (!writtenNamespaces[i])
                WriteLine("using {0};", requiredNamespaces[i]);
    }

    // Translates the values of the enum vsCMAccess to a C# access modifier keyword.
    string TranslateCodeAccess(vsCMAccess access)
    {
        switch (access)
        {
        case vsCMAccess.vsCMAccessPublic:
            return "public";
        case vsCMAccess.vsCMAccessProtected:
            return "protected";
        case vsCMAccess.vsCMAccessPrivate:
            return "private";
        case vsCMAccess.vsCMAccessProject:
            return "internal";
        case vsCMAccess.vsCMAccessAssemblyOrFamily:
        case vsCMAccess.vsCMAccessProjectOrProtected:
            return "protected internal";
        default:
            return "";
        }
    }

    // copies the XML comment documentation from the source element to the target, commented with '/// '.
    void WriteDoc(string doc)
    {
        if (string.IsNullOrWhiteSpace(doc))
            return;

        var docElement = XElement.Parse(doc);
        
        PushIndent("/// ");
        docElement.Elements().Select(e => { WriteLine(e.ToString()); return 1;}).Count();
        PopIndent();
    }

    // Translates the parameter to a C# string. Note that only type names are used and the namespaces are stripped-off.
    string GetType(CodeTypeRef type)
    {
        return GetTypeFromString(type.AsString);
    }

    // does the actual work of stripping the namespaces.
    string GetTypeFromString(string typeStr)
    {
        var result = new StringBuilder();
        var temp = new StringBuilder();

        foreach (var c in typeStr)
        {
            if (c == '.')
                temp.Clear();
            else
                if ("<>[,]".Contains(c))
                {
                    result.Append(temp);
                    result.Append(c);
                    temp.Clear();
                }
                else
                    temp.Append(c);
        }

        return result.Append(temp).ToString();
    }

    // gets the value inside of a quoted string - with quotes stripped-off.
    string GetQuotedValue(string quoted)
    {
        if (quoted.StartsWith("\""))
            return quoted.Substring(1, quoted.Length-2);
        else
        if (quoted.StartsWith("@\""))
            return quoted.Substring(2, quoted.Length-3).Replace("\"\"", "\"");
        else
            return quoted;
    }

    // Enumerates an array of methods which return possible path names of a file. Returns the first file name that exists or null.
    string TryGetExistingFile(params Func<string>[] possiblePathNames)
    {
        string fileName;

        foreach (var fn in possiblePathNames)
        {
            fileName = fn();
            if (File.Exists(fileName))
                return fileName;
        }

        StringBuilder sb = new StringBuilder("A file with none of the following path names exists:\r\n");

        foreach (var fn in possiblePathNames)
            sb.AppendLine("    "+fn());

        throw new FileNotFoundException(sb.ToString());
    }

    // Enumerates an array of methods which return possible path names of a file. Returns the first file name that exists or throws FileNotFoundException.
    string GetExistingFile(params Func<string>[] possiblePathNames)
    {
        string fileName = TryGetExistingFile(possiblePathNames);

        if (fileName != null)
            return fileName;

        StringBuilder sb = new StringBuilder("A file with none of the following path names exists:\r\n");

        foreach (var fn in possiblePathNames)
            sb.AppendLine("    "+fn());

        throw new FileNotFoundException(sb.ToString());
    }

    void SeparatedList<T>(
        IEnumerable<T> sequence,
        Action<T> elementAction,
        Action elementSeparation,
        Action beforeFirstElement = null,
        Action afterLastElement = null)
    {
        bool isFirst = true;

        foreach (var t in sequence)
        {
            if (isFirst)
            {
                isFirst = false;
                if (beforeFirstElement != null)
                    beforeFirstElement();
            }
            else
                elementSeparation();
            elementAction(t);
        }

        if (!isFirst  &&  afterLastElement != null)
            afterLastElement();
    }

    void WriteInterfaceAttributes(
        CodeInterface sourceInterface,
        out string soapNamespace,
        out bool soapNamespaceIsQuoted,
        out string soapName,
        out bool soapNameIsQuoted)
    {
        soapNamespace         = "http://tempuri.org";
        soapNamespaceIsQuoted = true;
        soapName              = sourceInterface.Name;
        soapNameIsQuoted      = true;

        var ns         = "http://tempuri.org";
        var nm         = sourceInterface.Name;
        var nsIsQuoted = true;
        var nmIsQuoted = true;

        foreach (CodeAttribute a in sourceInterface.Attributes)
        {
            Write("[");
            Write(a.Name);

            SeparatedList(
                a.Children.OfType<CodeAttributeArgument>(),
                arg => {
                            if (string.IsNullOrWhiteSpace(arg.Name))
                                Write(arg.Value);
                            else
                            {
                                Write("{0}={1}", arg.Name, arg.Value);
                                if (a.Name == "ServiceContract")
                                {
                                    if (arg.Name == "Namespace")
                                    {
                                        ns = GetQuotedValue(arg.Value);
                                        nsIsQuoted = arg.Value.StartsWith("\"") || arg.Value.StartsWith("@\"");
                                    }
                                    if (arg.Name == "Name")
                                    {
                                        nm = GetQuotedValue(arg.Value);
                                        nmIsQuoted = arg.Value.StartsWith("\"") || arg.Value.StartsWith("@\"");
                                    }
                                }
                            }
                       },
                () => Write(", "),
                () => Write("("),
                () => Write(")"));

            WriteLine("]");
        }

        soapNamespace         = ns;
        soapNamespaceIsQuoted = nsIsQuoted;
        soapName              = nm;
        soapNameIsQuoted      = nmIsQuoted;
    }

    void WriteInterfaceDeclaration(CodeInterface sourceInterface)
    {
        Write("{0} interface {1}Tasks", TranslateCodeAccess(sourceInterface.Access), sourceInterface.Name);

        SeparatedList(
            sourceInterface.Bases.OfType<CodeType>(),
            b => Write(GetTypeFromString(b.FullName)),
            () => Write(", "),
            () => Write(" : "));

        WriteLine("");
    }

    void WriteMethod(
        CodeFunction method,
        string soapNamespace,
        bool soapNamespaceIsQuoted,
        string soapName,
        bool soapNameIsQuoted)
    {
        WriteDoc(method.DocComment);
        WriteMethodAttributes(method, soapNamespace, soapNamespaceIsQuoted, soapName, soapNameIsQuoted);

        var type = GetType(method.Type as CodeTypeRef2);

        Write("Task");
        if (type != "void")
            Write("<{0}>", type);

        Write(" ");
        Write("{0}Async", method.Name);
        Write("(");
        WriteParameters(method.Parameters);
        WriteLine(");");
    }

    string WriteMethodAttributes(
        CodeFunction method, 
        string soapNamespace,
        bool soapNamespaceIsQuoted,
        string soapName,
        bool soapNameIsQuoted)
    {
        var name = method.Name;
        var nameIsQuoted = true;

        foreach (CodeAttribute a in method.Attributes)
        {
            Write("[");
            Write(a.Name);

            var hasArgs   = false;
            var hasAction = false;
            var hasReply  = false;

            SeparatedList(
                a.Children.OfType<CodeAttributeArgument>(),
                arg => {
                           if (string.IsNullOrWhiteSpace(arg.Name))
                               Write(arg.Value);
                           else
                           {
                               Write("{0}={1}", arg.Name, arg.Value);
                               if (a.Name == "OperationContract")
                                   if (arg.Name == "Name")
                                   {
                                       name = GetQuotedValue(arg.Value);
                                       nameIsQuoted = arg.Value.StartsWith("\"") || arg.Value.StartsWith("@\"");
                                   }
                                   else
                                   {
                                       hasAction = arg.Name == "Action";
                                       hasReply  = arg.Name == "ReplyAction";
                                   }
                           }
                       },
                () => Write(", "),
                () => { Write("("); hasArgs = true; });

            if (a.Name == "OperationContract")
            {
                PushIndent("    ");

                if (!hasAction)
                {
                    if (!hasArgs)
                    {
                        WriteLine("(");
                        hasArgs = true;
                    }
                    else
                        WriteLine(",");

                    Write("Action=");
                    if (soapNamespaceIsQuoted)
                        Write("\"{0}", soapNamespace);
                    else
                        Write("{0}+\"", soapNamespace);
                    Write("/");
                    if (soapNameIsQuoted)
                        Write(soapName);
                    else
                        Write("\"+{0}+\"", soapName);

                    if (nameIsQuoted)
                        Write("/{0}\"", name);
                    else
                        Write("/\"+{0}", name);
                }
                
                if (!hasReply)
                {
                    if (!hasArgs)
                    {
                        WriteLine("(");
                        hasArgs = true;
                    }
                    else
                        WriteLine(",");

                    Write("ReplyAction=");
                    if (soapNamespaceIsQuoted)
                        Write("\"{0}", soapNamespace);
                    else
                        Write("{0}+\"", soapNamespace);
                    Write("/");
                    if (soapNameIsQuoted)
                        Write(soapName);
                    else
                        Write("\"+{0}+\"", soapName);

                    if (nameIsQuoted)
                        Write("/{0}Response\"", name);
                    else
                        Write("/\"+{0}+\"Response\"", name);
                }
                
                PopIndent();
            }

            if (hasArgs)
                Write(")");
            WriteLine("]");
        }

        return name;
    }

    void WriteParameters(
        CodeElements parameters)
    {
        PushIndent("    ");

        SeparatedList(
            parameters.OfType<CodeParameter>(),
            p => {
                    WriteLine("\r\n");
                    WriteParameterAttributes(p.Attributes);
                    Write("{0} {1}", GetType(p.Type), p.Name);
                 },
            () => Write(","));
        
        PopIndent();
    }

    void WriteParameterAttributes(
        CodeElements attributes)
    {
        foreach(CodeAttribute a in attributes)
        {
            Write("[");
            Write(a.Name);

            SeparatedList(
                a.Children.OfType<CodeAttributeArgument>(),
                arg => {
                            if (string.IsNullOrWhiteSpace(arg.Name))
                                Write(arg.Value);
                            else
                                Write("{0}={1}", arg.Name, arg.Value);
                       },
                () => Write(", "),
                () => Write("("),
                () => Write(")"));

            WriteLine("]");
        }
    }
#>