<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="EnvDTE" #>
<#@ Assembly Name="EnvDTE80" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\\..\\Aspects\\Templates\\CommonUtilities.ttinclude" #><# 

    DTE dte = GetEnvDte();

    var sourceFileName = GetTemplateName(dte).Replace("Tasks.tt", ".cs");
    var projectItem    = dte.Solution.FindProjectItem(sourceFileName);
    var codeModel      = projectItem.FileCodeModel;
    var codeNamespace  = codeModel.CodeElements.OfType<CodeNamespace>().FirstOrDefault();
    var codeInterface  = codeNamespace.Children.OfType<EnvDTE.CodeInterface>().FirstOrDefault();
    var codeMethods    = codeInterface.Children.OfType<EnvDTE.CodeFunction>().FirstOrDefault();

    string soapNamespace;
    string soapName;

    WriteUsings(codeModel.CodeElements, "System.Threading.Tasks");

    WriteLine("");
    WriteLine("namespace {0}", codeNamespace.FullName);
    WriteLine("{");
    PushIndent("    ");

    WriteDoc(codeInterface.DocComment);
    
    WriteInterfaceAttributes(codeInterface, out soapNamespace, out soapName);

    WriteInterfaceDeclaration(codeInterface);

    WriteLine("{");
    PushIndent("    ");

    foreach (var method in codeInterface.Members.OfType<CodeFunction>())
        WriteMethod(method, soapNamespace, soapName);

    PopIndent();
    WriteLine("}");

    PopIndent();
    WriteLine("}");
#><#+

    void WriteInterfaceAttributes(
        CodeInterface codeInterface,
        out string soapNamespace,
        out string soapName)
    {
        var ns   = "http://tempuri.org";
        var name = codeInterface.Name;

        foreach (CodeAttribute a in codeInterface.Attributes)
        {
            Write("[");
            Write(a.Name);

            SeparatedList(
                a.Children.OfType<CodeAttributeArgument>(),
                arg => {
                            if (string.IsNullOrWhiteSpace(arg.Name))
                                Write(arg.Value);
                            else
                            {
                                Write("{0}={1}", arg.Name, arg.Value);
                                if (a.Name == "ServiceContract")
                                {
                                    if (arg.Name == "Namespace")
                                        ns = GetQuotedValue(arg.Value);
                                    if (arg.Name == "Name")
                                        name = GetQuotedValue(arg.Value);
                                }
                            }
                       },
                () => Write(", "),
                () => Write("("),
                () => Write(")"));

            WriteLine("]");
        }

        soapNamespace  = ns;
        soapName       = name;
    }

    void WriteInterfaceDeclaration(CodeInterface codeInterface)
    {
        Write("{0} interface {1}Tasks", TranslateCodeAccess(codeInterface.Access), codeInterface.Name);

        SeparatedList(
            codeInterface.Bases.OfType<CodeType>(),
            b => Write(GetTypeFromString(b.FullName)),
            () => Write(", "),
            () => Write(" : "));

        WriteLine("");
    }

    void WriteMethod(CodeFunction method, string soapNamespace, string soapName)
    {
        WriteDoc(method.DocComment);
        WriteMethodAttributes(method, soapNamespace, soapName);

        var type = GetType(method.Type as CodeTypeRef2);

        Write("Task");
        if (type != "void")
            Write("<{0}>", type);

        Write(" ");
        Write("{0}Async", method.Name);
        Write("(");
        WriteParameters(method.Parameters);
        WriteLine(");\r\n");
    }

    string WriteMethodAttributes(
        CodeFunction method, 
        string soapNamespace, 
        string soapName)
    {
        var name = method.Name;

        foreach (CodeAttribute a in method.Attributes)
        {
            Write("[");
            Write(a.Name);

            var hasArgs   = false;
            var hasAction = false;
            var hasReply  = false;

            SeparatedList(
                a.Children.OfType<CodeAttributeArgument>(),
                arg => {
                           if (string.IsNullOrWhiteSpace(arg.Name))
                               Write(arg.Value);
                           else
                           {
                               Write("{0}={1}", arg.Name, arg.Value);
                               if (a.Name == "OperationContract")
                                   if (arg.Name == "Name")
                                       name = GetQuotedValue(arg.Value);
                                   else
                                   {
                                       hasAction = arg.Name == "Action";
                                       hasReply  = arg.Name == "ReplyAction";
                                   }
                           }
                       },
                () => Write(", "),
                () => { Write("("); hasArgs = true; });

            if (a.Name == "OperationContract")
            {
                PushIndent("    ");

                if (!hasAction)
                {
                    if (!hasArgs)
                    {
                        WriteLine("(");
                        hasArgs = true;
                    }
                    else
                        WriteLine(",");
                    Write("Action=\"{0}/{1}/{2}\"", soapNamespace, soapName, name);
                }
                
                if (!hasReply)
                {
                    if (!hasArgs)
                    {
                        WriteLine("(");
                        hasArgs = true;
                    }
                    else
                        WriteLine(",");
                    Write("ReplyAction=\"{0}/{1}/{2}Response\"", soapNamespace, soapName, name);
                }
                
                PopIndent();
            }

            if (hasArgs)
                Write(")");
            WriteLine("]");
        }

        return name;
    }

    void WriteParameters(
        CodeElements parameters)
    {
        PushIndent("    ");
        SeparatedList(
            parameters.OfType<CodeParameter>(),
            p => {
                    WriteLine("\r\n");
                    WriteParameterAttributes(p.Attributes);
                    Write("{0} {1}", GetType(p.Type), p.Name);
                 },
            () => Write(","));
        PopIndent();
    }

    void WriteParameterAttributes(
        CodeElements attributes)
    {
        foreach(CodeAttribute a in attributes)
        {
            Write("[");
            Write(a.Name);

            SeparatedList(
                a.Children.OfType<CodeAttributeArgument>(),
                arg => {
                            if (string.IsNullOrWhiteSpace(arg.Name))
                                Write(arg.Value);
                            else
                                Write("{0}={1}", arg.Name, arg.Value);
                       },
                () => Write(", "),
                () => Write("("),
                () => Write(")"));

            WriteLine("]");
        }
    }
#>