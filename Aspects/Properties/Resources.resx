<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExFromEnumDomain" xml:space="preserve">
    <value>The target value is from the specified enumeration's set of values.</value>
  </data>
  <data name="ExNegatedNonnegativeValidation" xml:space="preserve">
    <value>The value is not negative.</value>
  </data>
  <data name="ExNonnegativeValidation" xml:space="preserve">
    <value>The value is negative.</value>
  </data>
  <data name="ExNotComparable" xml:space="preserve">
    <value>This type does not implement IComparable.</value>
  </data>
  <data name="ExNotFromEnumDomain" xml:space="preserve">
    <value>The target value is not from the enumeration type's set of values.</value>
  </data>
  <data name="ExNotNullableEnumType" xml:space="preserve">
    <value>The type of the target element is not nullable enumeration type.</value>
  </data>
  <data name="ExNotNullOrEmptyString" xml:space="preserve">
    <value>The target string is neither null, nor empty, nor white space character(s) only.</value>
  </data>
  <data name="ExNotSignedNumber" xml:space="preserve">
    <value>The target type cannot be tested for being non-negative.</value>
  </data>
  <data name="ExNotStringType" xml:space="preserve">
    <value>The type of the target element is not System.String.</value>
  </data>
  <data name="ExNotValidUrl" xml:space="preserve">
    <value>The target string does not represent a valid root URL (top and domain level parts are optional, e.g. Experian.com is missing)</value>
  </data>
  <data name="ExNotValidXmlString" xml:space="preserve">
    <value>The validated string does not represent a well-formed document, or valid XML document, or the name of the document root element does not match the specified name.</value>
  </data>
  <data name="ExNullOrEmptyString" xml:space="preserve">
    <value>The target string is either null, empty or white space character(s) only.</value>
  </data>
  <data name="ExNullXmlDocument" xml:space="preserve">
    <value>The validated string is null, or empty, or consists of white-space characters only and does not represent a valid XML document.</value>
  </data>
  <data name="ExRootElementNotMatching" xml:space="preserve">
    <value>The name of the root element of the XML ({0}) does not match the specified root name ({1}).</value>
  </data>
  <data name="ExValidUrl" xml:space="preserve">
    <value>The target string represents a valid root URL (the top and domain level parts are optional, e.g. vm.com is missing)</value>
  </data>
  <data name="ExValidXmlString" xml:space="preserve">
    <value>The validated string represents a well-formed and valid XML document; and the name of the document root element matches the specified name.</value>
  </data>
  <data name="ExEmptyGuid" xml:space="preserve">
    <value>The target Guid value is equal to the default Guid value of '00000000-0000-0000-0000-000000000000'.</value>
  </data>
  <data name="ExNotEmptyGuid" xml:space="preserve">
    <value>The target Guid value is not equal to the default Guid value of '00000000-0000-0000-0000-000000000000'.</value>
  </data>
  <data name="ExNotValidLuhnNumber" xml:space="preserve">
    <value>The target string is not a valid number according to the Luhn algorithm.</value>
  </data>
  <data name="ExValidLuhnNumber" xml:space="preserve">
    <value>The target string is a valid number according to the Luhn algorithm.</value>
  </data>
  <data name="ExNotGuidType" xml:space="preserve">
    <value>The type of the target element is not System.Guid.</value>
  </data>
  <data name="ExNotValidAbaRoutingNumber" xml:space="preserve">
    <value>The target does not represent a valid ABA routing number.</value>
  </data>
  <data name="ExValidAbaRoutingNumber" xml:space="preserve">
    <value>The target does represents a valid ABA routing number.</value>
  </data>
</root>