//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace vm.Aspects.Security.Cryptography.Ciphers.Utilities.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("vm.Aspects.Security.Cryptography.Ciphers.Utilities.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find the specified certificate..
        /// </summary>
        internal static string CertNotFound {
            get {
                return ResourceManager.GetString("CertNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid thumbprint..
        /// </summary>
        internal static string InvalidThumbprint {
            get {
                return ResourceManager.GetString("InvalidThumbprint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please, specify a certificate thumbprint or subject..
        /// </summary>
        internal static string MissingCertificate {
            get {
                return ResourceManager.GetString("MissingCertificate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please, specify the round-trip filename..
        /// </summary>
        internal static string MissingRoundtrip {
            get {
                return ResourceManager.GetString("MissingRoundtrip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please, specify source filename..
        /// </summary>
        internal static string MissingSource {
            get {
                return ResourceManager.GetString("MissingSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The option /s must be followed by the subject of the certificate..
        /// </summary>
        internal static string MissingSubject {
            get {
                return ResourceManager.GetString("MissingSubject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please, specify target filename..
        /// </summary>
        internal static string MissingTarget {
            get {
                return ResourceManager.GetString("MissingTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The option /t must be followed by the thumbprint of the certificate..
        /// </summary>
        internal static string MissingThumbprint {
            get {
                return ResourceManager.GetString("MissingThumbprint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Press any key to finish....
        /// </summary>
        internal static string PressAnyKey {
            get {
                return ResourceManager.GetString("PressAnyKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string String1 {
            get {
                return ResourceManager.GetString("String1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FileCrypt encrypts and decrypts files using a certificate from the user&apos;s 
        ///certificate store.
        ///
        ///Options:
        ///
        ////s  The next argument must be the subject of the certificate to be used.
        ////t  The next argument must be the thumbprint of the certificate to be used.
        ////e  Perform encryption. This is the default action and can be omitted.
        ////d  Perform decryption.
        ////6 Encode or decode the result with Base64
        ///
        ///Note that the options can be specified with dashes too, e.g. instead of /d
        ///you can use -d instead.
        ///
        ///Param [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Usage {
            get {
                return ResourceManager.GetString("Usage", resourceCulture);
            }
        }
    }
}
