<?xml version="1.0"?>
<doc>
    <assembly>
        <name>vm.Aspects.Linq.Expressions.Serialization</name>
    </assembly>
    <members>
        <member name="T:vm.Aspects.Linq.Expressions.Serialization.IConstantXmlSerializer">
            <summary>
            Represents the serialization behavior for various types of objects.
            </summary>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.IConstantXmlSerializer.Serialize(System.Object,System.Type)">
            <summary>
            Serializes the specified constant.
            </summary>
            <param name="constant">The constant to be serialized.</param>
            <param name="type">The type of the constant (if needed).</param>
            <returns>The XElement generated by the serializer representing the type and the value of the <paramref name="constant"/>.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.IConstantXmlSerializer.Deserialize(System.Xml.Linq.XElement,System.Type)">
            <summary>
            Deserializes an object from the specified XML element.
            </summary>
            <param name="element">The XML element to deserialize from.</param>
            <param name="type">The type of the constant (if needed).</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization">
            <summary>
            Contains utilities for serializing and de-serializing objects.
            </summary>
        </member>
        <member name="F:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization._constantSerializers">
            <summary>
            The map of base type constants serializers
            </summary>
        </member>
        <member name="F:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization._constantDeserializers">
            <summary>
            The map of base type constants de-serializers
            </summary>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.AddSerializer(vm.Aspects.Linq.Expressions.Serialization.IConstantXmlSerializer,System.Type,System.Xml.Linq.XName)">
            <summary>
            Adds a serializer.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="constantsType">Type of the constants.</param>
            <param name="elementName">Name of the element.</param>
            <exception cref="T:System.ArgumentNullException">
            serializer
            or
            constantsType
            or
            elementName
            </exception>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.CanSerialize(System.Type)">
            <summary>
            Determines whether the specified <paramref name="type"/> can be serialized.
            </summary>
            <remarks>
            A type is serializable if it is:
            <list type="bullet">
                <item>primitive type (char, byte, int, long, etc.)</item>
                <item>enum</item>
                <item>DBNull</item>
                <item>decimal</item>
                <item>string</item>
                <item>Guid</item>
                <item>Uri</item>
                <item>DateTime</item>
                <item>TimeSpan</item>
                <item>DateTimeOffset</item>
                <item>IntPtr</item>
                <item>UIntPtr</item>
                <item>Anonymous</item>
                <item>The type is marked with <see cref="T:System.Runtime.Serialization.DataContractAttribute"/></item>
                <item>The type is marked with <see cref="T:System.SerializableAttribute"/></item>
                <item>The type is array, enumerable, dictionary or Nullable&lt;&gt; of one of the types above.</item>
            </list>
            </remarks>
            <param name="type">The type.</param>
            <returns>
              <see langword="true"/> if <paramref name="type"/> can be serialized; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.GetSerializer(System.Type)">
            <summary>
            Gets a serializer for a value of the specified <paramref name="type"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>
            A delegate that can serialize a value of the specified <paramref name="type"/> into an XML element (<see cref="T:System.Xml.Linq.XElement"/>).
            </returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException"></exception>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.GetDeserializer(System.Xml.Linq.XElement)">
            <summary>
            Gets the constant value de-serializing delegate corresponding to the <paramref name="element"/>.
            </summary>
            <param name="element">The element which holds serialized constant value.</param>
            <returns>The de-serializing delegate corresponding to the <paramref name="element"/>.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.SerializeEnum(System.Object,System.Type,System.Xml.Linq.XElement)">
            <summary>
            Serializes enum values.
            </summary>
            <param name="enum">The enum value.</param>
            <param name="type">The type.</param>
            <param name="parent">The parent.</param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.DeserializeEnum(System.Xml.Linq.XElement,System.Type)">
            <summary>
            Deserializes the enum.
            </summary>
            <param name="element">The element.</param>
            <param name="type">The type.</param>
            <returns>The deserialized constant.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            </exception>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.SerializeNullable(System.Object,System.Type,System.Xml.Linq.XElement)">
            <summary>
            Serializes a nullable value.
            </summary>
            <param name="nullable">The nullable value to be serialized.</param>
            <param name="type">The type of the value.</param>
            <param name="parent">The parent element where to add the serialized.</param>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.DeserializeNullable(System.Xml.Linq.XElement,System.Type)">
            <summary>
            De-serializes a nullable constant.
            </summary>
            <param name="element">The element from which to de-serialize.</param>
            <param name="type">The type.</param>
            <returns>The de-serialized constant.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.SerializeAnonymous(System.Object,System.Type,System.Xml.Linq.XElement)">
            <summary>
            Serializes an anonymous object.
            </summary>
            <param name="anonymous">The anonymous object to be serialized.</param>
            <param name="type">The type of the anonymous object.</param>
            <param name="parent">The parent element where to serialize the anonymous object to.</param>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.DeserializeAnonymous(System.Xml.Linq.XElement,System.Type)">
            <summary>
            De-serializes an anonymous object constant.
            </summary>
            <param name="element">The element from which to de-serialize the constant.</param>
            <param name="type">The type.</param>
            <returns>The de-serialized anonymous object constant.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.SerializeCustom(System.Object,System.Type,System.Xml.Linq.XElement)">
            <summary>
            Serializes an object using <see cref="T:System.Runtime.Serialization.DataContractSerializer"/>.
            </summary>
            <param name="obj">The object to be serialized.</param>
            <param name="type">The type of the object.</param>
            <param name="parent">The parent element where to serialize the object to.</param>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.DeserializeCustom(System.Xml.Linq.XElement,System.Type)">
            <summary>
            De-serializes an object constant.
            </summary>
            <param name="element">The element from which to de-serialize the constant.</param>
            <param name="type">The type.</param>
            <returns>The de-serialized object constant.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">Expected type attribute.</exception>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.GetType(System.Xml.Linq.XElement)">
            <summary>
            Gets the type corresponding to the attribute @type in the given element.
            </summary>
            <param name="element">The element.</param>
            <returns>The specified type.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.DataSerialization.GetType(System.Xml.Linq.XAttribute)">
            <summary>
            Gets the type corresponding to a type name written in an XML attribute.
            </summary>
            <param name="typeAttribute">The type attribute.</param>
            <returns>The specified type.</returns>
        </member>
        <member name="F:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionDeserializingVisitor._references">
            <summary>
            Holds the parameters of the lambda expressions that are referred to inside the lambda expressions' bodies.
            </summary>
        </member>
        <member name="F:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionDeserializingVisitor._deserializers">
            <summary>
            Holds dictionary of expression element name - delegate to the respective de-serializer.
            </summary>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionDeserializingVisitor.Visit(System.Xml.Linq.XElement)">
            <summary>
            This is the starting point of the visitor.
            </summary>
            <param name="element">The element to be visited.</param>
            <returns>The created expression.</returns>
        </member>
        <member name="T:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor">
            <summary>
            Visits the nodes of an expression and serializes the data in them to an XML.
            </summary>
        </member>
        <member name="F:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor._elements">
            <summary>
            The intermediate results (XElements) are pushed here to be popped out and placed later as operands (sub-elements) into a parent element, 
            representing an expression node's operation.
            E.g. the sequence of operations while serializing "a+b+c" may look like this:
            <para>
            push Element(b)
            </para><para>
            push Element(a)
            </para><para>
            push AddElement(pop, pop)
            </para><para>
            push Element(c)
            </para><para>
            push AddElement(pop, pop)
            </para><para>
            As in a reversed polish record.
            </para>
            In the end of a successful visit the stack should contain only one element - the root of the whole expression.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.Result">
            <summary>
            Gets the result - the only element left in the stack after a successful visit.
            </summary>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Dispatches the expression to one of the more specialized visit methods in this class.
            Used in Debug mode only for tracing the expression tree traversal.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
            <exception cref="T:System.ArgumentNullException">node</exception>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.GenericVisit``1(``0,System.Func{``0,System.Linq.Expressions.Expression},System.Action{``0,System.Xml.Linq.XElement})">
            <summary>
            Invokes the base class' visit method on the expression node (which may reduce it), creates the representing XML element and invokes the
            XML serializing delegate.
            </summary>
            <typeparam name="E">The type of the visited expression.</typeparam>
            <param name="expressionNode">The expression node to be serialized.</param>
            <param name="baseVisit">Delegate to the base class' visiting method.</param>
            <param name="thisVisit">Delegate to the XML serializing method.</param>
            <returns>The possibly reduced expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ConstantExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitDefault(System.Linq.Expressions.DefaultExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.DefaultExpression" /> and generates XML element out of it.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.ParameterExpression" /> and generates XML element out of it.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visits the children of the Expression{TDelegate} and generates XML element out of it.
            </summary>
            <typeparam name="T">The type of the delegate.</typeparam>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.UnaryExpression" /> and generates XML element out of it.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.BinaryExpression" /> and serializes it to an XML element.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> and serializes it to an XML element.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitBlock(System.Linq.Expressions.BlockExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.BlockExpression" /> and serializes it to an XML element.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.ConditionalExpression" /> and serializes it to an XML element.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitIndex(System.Linq.Expressions.IndexExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.IndexExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>
            The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.
            </returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.InvocationExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
            Visits the children of the extension expression.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitLabelTarget(System.Linq.Expressions.LabelTarget)">
            <summary>
            Visits the <see cref="T:System.Linq.Expressions.LabelTarget" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitLabel(System.Linq.Expressions.LabelExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.LabelExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitGoto(System.Linq.Expressions.GotoExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.GotoExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitLoop(System.Linq.Expressions.LoopExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.LoopExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitSwitch(System.Linq.Expressions.SwitchExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.SwitchExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitSwitchCase(System.Linq.Expressions.SwitchCase)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.SwitchCase" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitTry(System.Linq.Expressions.TryExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.TryExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitCatchBlock(System.Linq.Expressions.CatchBlock)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.CatchBlock" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.ListInitExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.ElementInit" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.NewArrayExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberInitExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitMemberBinding(System.Linq.Expressions.MemberBinding)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberBinding" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberAssignment" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberMemberBinding" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.MemberListBinding" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitRuntimeVariables(System.Linq.Expressions.RuntimeVariablesExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitDynamic(System.Linq.Expressions.DynamicExpression)">
            <summary>
            Visits the children of the <see cref="T:System.Linq.Expressions.DynamicExpression" />.
            </summary>
            <param name="node">The expression to visit.</param>
            <returns>The modified expression, if it or any subexpression was modified; otherwise, returns the original expression.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitAsType(System.Linq.Expressions.UnaryExpression)">
            <summary>
            If the unary expression has type conversion component, this method creates an &quot;asType&quot; attribute.
            </summary>
            <param name="node">The unary node.</param>
            <returns>An &quot;asType&quot; attribute or <see langword="null"/> if <paramref name="node"/> does not contain type conversion component.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitParameters(System.Collections.Generic.IEnumerable{System.Reflection.ParameterInfo})">
            <summary>
            Creates a sequence of XML elements for each of the <paramref name="parameters"/>.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A sequence of elements.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitMethodInfo(System.Linq.Expressions.BinaryExpression)">
            <summary>
            If the binary expression has overloading method, creates an XML &quot;method&quot; element.
            </summary>
            <param name="node">The binary node.</param>
            <returns>The created method or <see langword="null"/> if there is no overloading method.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitMethodInfo(System.Linq.Expressions.UnaryExpression)">
            <summary>
            If the unary expression has overloading method, creates an XML &quot;method&quot; element.
            </summary>
            <param name="node">The node.</param>
            <returns>The created method or <see langword="null"/> if there is no overloading method.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitMemberInfo(System.Reflection.MemberInfo)">
            <summary>
            Creates an XML element out of <paramref name="memberInfo"/>.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns>An XML element or <see langword="null"/> if <paramref name="memberInfo"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitMethodInfo(System.Reflection.MethodInfo)">
            <summary>
            Creates an XML element out of <paramref name="methodInfo"/>.
            </summary>
            <param name="methodInfo">The method info.</param>
            <returns>An XML element or <see langword="null"/> if <paramref name="methodInfo"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitConstructorInfo(System.Reflection.ConstructorInfo)">
            <summary>
            Creates an XML element out of <paramref name="constructorInfo"/>.
            </summary>
            <param name="constructorInfo">The method info.</param>
            <returns>An XML element or <see langword="null"/> if <paramref name="constructorInfo"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitEventInfo(System.Reflection.EventInfo)">
            <summary>
            Creates an XML element out of <paramref name="eventInfo"/>.
            </summary>
            <param name="eventInfo">The property info.</param>
            <returns>An XML element or <see langword="null"/> if <paramref name="eventInfo"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitPropertyInfo(System.Reflection.PropertyInfo)">
            <summary>
            Creates an XML element out of <paramref name="propertyInfo"/>.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns>An XML element or <see langword="null"/> if <paramref name="propertyInfo"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.ExpressionSerializingVisitor.VisitFieldInfo(System.Reflection.FieldInfo)">
            <summary>
            Creates an XML element out of <paramref name="fieldInfo"/>.
            </summary>
            <param name="fieldInfo">The property info.</param>
            <returns>An XML element or <see langword="null"/> if <paramref name="fieldInfo"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.XElementExtensions.AddTypeAttribute(System.Xml.Linq.XElement,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Adds the type attribute.
            </summary>
            <param name="element">The element.</param>
            <param name="expression">The expression.</param>
            <param name="defaultType">The default type.</param>
            <returns>XElement.</returns>
            <exception cref="T:System.ArgumentNullException">
            element
            or
            expression
            </exception>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.Extensions.IsBasicType(System.Type)">
            <summary>
            Determines whether the specified type is basic: primitive, enum, decimal, string, Guid, Uri, DateTime, TimeSpan, DateTimeOffset, IntPtr, 
            UIntPtr.
            </summary>
            <param name="type">The type to be tested.</param>
            <returns>
              <see langword="true"/> if the specified type is one of the basic types; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter.Equals(vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter)">
            <summary>
            Indicates whether the current object is equal to a reference to another object of the same type.
            </summary>
            <param name="other">A reference to another object of type <see cref="T:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter"/> to compare with this object.</param>
            <returns>
            <see langword="false"/> if <paramref name="other"/> is equal to <see langword="null"/>, otherwise
            <see langword="true"/> if <paramref name="other"/> refers to <c>this</c> object, otherwise
            <see langword="true"/> if <i>the business identities</i> of the current object and the <paramref name="other"/> are equal by value,
            otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            The <see cref="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter.Equals(vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter)"/> methods and the overloaded <c>operator==</c>-s test for business identity, 
            i.e. they test for business <i>same-ness</i> by comparing the business keys.
            </remarks>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter.Equals(System.Object)">
            <summary>
            Determines whether this <see cref="T:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter"/> instance is equal to the specified <see cref="T:System.Object"/> reference.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> reference to compare with this <see cref="T:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter"/> object.</param>
            <returns>
            <see langword="false"/> if <paramref name="obj"/> is equal to <see langword="null"/>, otherwise
            <see langword="true"/> if <paramref name="obj"/> refers to <c>this</c> object, otherwise
            <see langword="true"/> if <paramref name="obj"/> <i>is an instance of</i> <see cref="T:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter"/> and 
            <i>the business identities</i> of the current object and the <paramref name="obj"/> are equal by value; otherwise, 
            <see langword="false"/>.
            </returns>
            <remarks>
            The <see cref="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter.Equals(System.Object)"/> methods and the overloaded <c>operator==</c>-s test for business identity, 
            i.e. they test for business <i>same-ness</i> by comparing the business keys.
            </remarks>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter.GetHashCode">
            <summary>
            Serves as a hash function for the objects of <see cref="T:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter"/> and its derived types.
            </summary>
            <returns>A hash code for the current <see cref="T:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter"/> instance.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter.op_Equality(vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter,vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter)">
            <summary>
            Compares two <see cref="T:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter"/> objects.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>
            <see langword="true"/> if the objects are considered to be equal (<see cref="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter.Equals(vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter)"/>);
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter.op_Inequality(vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter,vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter)">
            <summary>
            Compares two <see cref="T:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter"/> objects.
            </summary>
            <param name="left">The left operand.</param>
            <param name="right">The right operand.</param>
            <returns>
            <see langword="true"/> if the objects are not considered to be equal (<see cref="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter.Equals(vm.Aspects.Linq.Expressions.Serialization.Implementation.Parameter)"/>);
            otherwise <see langword="false"/>.
            </returns>
        </member>
        <member name="F:vm.Aspects.Linq.Expressions.Serialization.Implementation.TypeNameResolver._typesToNames">
            <summary>
            The map of base type to type names
            </summary>
        </member>
        <member name="F:vm.Aspects.Linq.Expressions.Serialization.Implementation.TypeNameResolver._namesToTypes">
            <summary>
            The map of type names to base type
            </summary>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.TypeNameResolver.GetType(System.String)">
            <summary>
            Gets the type corresponding to a type name written in an xml string.
            </summary>
            <param name="typeName">The name of the type.</param>
            <returns>The specified type.</returns>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.Implementation.TypeNameResolver.GetTypeName(System.Type)">
            <summary>
            Gets the name of the type appropriate for writing to an XML element.
            </summary>
            <param name="type">The type.</param>
            <returns>The name of the type.</returns>
        </member>
        <member name="F:vm.Aspects.Linq.Expressions.Serialization.Implementation.XNames.Xsd">
            <summary>
            The XML namespace of the W3C schema definition - http://www.w3.org/2001/XMLSchema
            </summary>
        </member>
        <member name="F:vm.Aspects.Linq.Expressions.Serialization.Implementation.XNames.Xsi">
            <summary>
            The XML namespace of the W3C instance schema definition - http://www.w3.org/2001/XMLSchema-instance
            </summary>
        </member>
        <member name="F:vm.Aspects.Linq.Expressions.Serialization.Implementation.XNames.Ser">
            <summary>
            The XML namespace of the Microsoft serialization schema definition - http://schemas.microsoft.com/2003/10/Serialization/
            </summary>
        </member>
        <member name="F:vm.Aspects.Linq.Expressions.Serialization.Implementation.XNames.Dcs">
            <summary>
            The XML namespace object representing the namespace of the data contracts - http://schemas.datacontract.org/2004/07/System
            </summary>
        </member>
        <member name="F:vm.Aspects.Linq.Expressions.Serialization.Implementation.XNames.Xxp">
            <summary>
            The XML namespace object representing the namespace of the Aspects' expression serialization - urn:schemas-vm-com:Aspects.Linq.Expressions.Serialization
            </summary>
        </member>
        <member name="T:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.CallerDoesNotHavePermission">
            <summary>
              Looks up a localized string similar to (Note: The caller does not have the permission to use reflection. Therefore System.Object.ToString() on the object has been dumped instead.).
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.CallerDoesNotHavePermissionFormat">
            <summary>
              Looks up a localized string similar to {0} (Note: The caller does not have the permission to use reflection. Therefore System.Object.ToString() on the object has been dumped instead.).
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.ClassMethodDesignator">
            <summary>
              Looks up a localized string similar to static.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.CollectionCountFormat">
            <summary>
              Looks up a localized string similar to {0}[{3}].
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.Colon">
            <summary>
              Looks up a localized string similar to : .
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.CyclicalReferenceDesignator">
            <summary>
              Looks up a localized string similar to {0} (see above).
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.DelegateDumpFormat">
            <summary>
              Looks up a localized string similar to {0}.{3} ({4}).
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.DumpReachedMaxDepth">
            <summary>
              Looks up a localized string similar to ...object dump reached the maximum depth level. Use the DumpAttribute.MaxDepth to increase the depth level if needed..
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.Ellipsis">
            <summary>
              Looks up a localized string similar to ....
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.EnumDumpFormat">
            <summary>
              Looks up a localized string similar to {0}.{3}.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.GenericParamFormat">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.GenericParamListBegin">
            <summary>
              Looks up a localized string similar to &lt;.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.GenericParamListEnd">
            <summary>
              Looks up a localized string similar to &gt;.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.GenericParamSeparator">
            <summary>
              Looks up a localized string similar to , .
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.IndexerEnd">
            <summary>
              Looks up a localized string similar to ].
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.IndexerIndexDumpFormat">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.IndexerInfoDumpFormat">
            <summary>
              Looks up a localized string similar to {0} {3}.{6}.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.IndexerStart">
            <summary>
              Looks up a localized string similar to this[.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.InstanceMethodDesignator">
            <summary>
              Looks up a localized string similar to instance.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.MaskInLogs">
            <summary>
              Looks up a localized string similar to ******.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.MemberInfoMemberTypeDumpFormat">
            <summary>
              Looks up a localized string similar to ({0}): .
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.MethodInfoDumpFormat">
            <summary>
              Looks up a localized string similar to {0} {3}.{6}.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.MethodParameterFormat">
            <summary>
              Looks up a localized string similar to {0} {3}.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.MethodParameterListBegin">
            <summary>
              Looks up a localized string similar to (.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.MethodParameterListEnd">
            <summary>
              Looks up a localized string similar to ).
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.ParametersSeparator">
            <summary>
              Looks up a localized string similar to , .
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.PropertyBegin">
            <summary>
              Looks up a localized string similar to  { .
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.PropertyEnd">
            <summary>
              Looks up a localized string similar to  }.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.PropertyGetter">
            <summary>
              Looks up a localized string similar to get;.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.PropertyLabelFormat">
            <summary>
              Looks up a localized string similar to {0,-24} = .
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.PropertySetter">
            <summary>
              Looks up a localized string similar to set;.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.RegexSystemNamespace">
            <summary>
              Looks up a localized string similar to System(\..+)?.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.SequenceDumpTruncatedFormat">
            <summary>
              Looks up a localized string similar to ... dumped the first {0} elements..
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.SequenceParamListBegin">
            <summary>
              Looks up a localized string similar to &lt;.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.SequenceParamListEnd">
            <summary>
              Looks up a localized string similar to &gt;[{0}]: .
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.SequenceTypeFormat">
            <summary>
              Looks up a localized string similar to ({2}).
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.StringNull">
            <summary>
              Looks up a localized string similar to &lt;null&gt;.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.StringSingleIndent">
            <summary>
              Looks up a localized string similar to   .
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.StringUnknown">
            <summary>
              Looks up a localized string similar to &lt;unknown&gt;.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.TypeDumpFormat">
            <summary>
              Looks up a localized string similar to {0} ({2}): .
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.ValueFormat">
            <summary>
              Looks up a localized string similar to {0}.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.Properties.Resources.ValueFormatToString">
            <summary>
              Looks up a localized string similar to ToString().
            </summary>
        </member>
        <member name="T:vm.Aspects.Linq.Expressions.Serialization.XmlExpressionSerializer">
            <summary>
            The instances of this class serialize LINQ expression trees of type <see cref="T:System.Linq.Expressions.Expression"/> to XML document or element and vice versa: 
            de-serialize XML documents or elements conforming to schema &quot;urn:schemas-vm-com:Aspects.Linq.Expressions.Serialization&quot; to <see cref="T:System.Linq.Expressions.Expression"/> objects.
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.XmlExpressionSerializer.XmlVersion">
            <summary>
            Gets or sets the XML document's version. Default - &quot;1.0&quot;
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.XmlExpressionSerializer.XmlEncoding">
            <summary>
            Gets or sets the XML document encoding. Default - &quot;UTF-8&quot;
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.XmlExpressionSerializer.XmlStandalone">
            <summary>
            Gets or sets the XML standalone attribute. Default - &quot;yes&quot;
            </summary>
        </member>
        <member name="P:vm.Aspects.Linq.Expressions.Serialization.XmlExpressionSerializer.AddComment">
            <summary>
            Gets or sets a value indicating whether to add expression comment to the XML element. Default - <see langword="true"/> in debug mode, 
            <see langword="false"/> in release mode.
            </summary>
            <value><see langword="true"/> to add comment; otherwise, <see langword="false"/>.</value>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.XmlExpressionSerializer.ToXmlDocument(System.Linq.Expressions.Expression)">
            <summary>
            Serializes the <paramref name="expression" /> to an XML document.
            </summary>
            <param name="expression">The expression to be serialized.</param>
            <returns>The XML document representing the <paramref name="expression" />.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="expression"/> is <see langword="null"/></exception>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.XmlExpressionSerializer.ToXmlElement(System.Linq.Expressions.Expression)">
            <summary>
            Serializes the <paramref name="expression"/> to an XML element.
            </summary>
            <param name="expression">The expression to be serialized.</param>
            <returns>The element representing the <paramref name="expression"/>.</returns>
            <exception cref="T:System.ArgumentNullException">
            If <paramref name="expression"/> is <see langword="null"/></exception>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.XmlExpressionSerializer.ToExpression(System.Xml.Linq.XDocument)">
            <summary>
            De-serializes the <paramref name="document"/> to an expression tree instance.
            </summary>
            <param name="document">
            The document to be deserialized. The document must conform to the schema &quot;urn:schemas-vm-com:Aspects.Linq.Expressions.Serialization&quot;
            </param>
            <returns>The created expression tree.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="document"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Xml.XmlException">If the <paramref name="document"/> is not a well-formed or valid document.</exception>
        </member>
        <member name="M:vm.Aspects.Linq.Expressions.Serialization.XmlExpressionSerializer.ToExpression(System.Xml.Linq.XElement)">
            <summary>
            De-serializes the <paramref name="element"/> to an expression tree instance.
            </summary>
            <param name="element">
            The element to be deserialized. The element must conform to the schema &quot;urn:schemas-vm-com:Aspects.Linq.Expressions.Serialization&quot;
            </param>
            <returns>The created expression tree.</returns>
            <exception cref="T:System.ArgumentNullException">If the <paramref name="element"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Xml.XmlException">If the <paramref name="element"/> is not a well-formed or valid document.</exception>
        </member>
        <member name="T:vm.Aspects.Threading.ReaderSlimSync">
            <summary>
            With the help of this class the developer can create a synchronized multiple readers/single writer scope by utilizing the <c>using</c> statement.
            </summary>
            <example>
            <code>
            <![CDATA[
            class Protected
            {
                static ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);
                static Dictionary<string, string>; _protected = new Dictionary<string, string>();
                
                public void Get(string key)
                {
                    using(new ReaderSlimSync(_lock))
                        return _protected[key];
                }
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:System.Threading.WriterSlimSync"/>, <seealso cref="T:vm.Aspects.Threading.UpgradeableReaderSlimSync"/>, <seealso cref="T:vm.Aspects.Threading.WriterSlimSync"/>.
        </member>
        <member name="M:vm.Aspects.Threading.ReaderSlimSync.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:vm.Aspects.Threading.ReaderSlimSync"/> class with the specified <paramref name="readerWriterLock"/> and
            waits indefinitely till it acquires the lock in reader mode.
            </summary>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="F:vm.Aspects.Threading.ReaderSlimSync._disposed">
            <summary>
            The flag is being set when the object gets disposed.
            </summary>
            <value>
            0 - if the object is not disposed yet, any other value would mean that the object is already disposed.
            </value>
        </member>
        <member name="P:vm.Aspects.Threading.ReaderSlimSync.IsDisposed">
            <summary>
            Returns <see langword="true"/> if the object has already been disposed, otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:vm.Aspects.Threading.ReaderSlimSync.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:vm.Aspects.Threading.ReaderWriterLockSlimExtensions">
            <summary>
            Class ReaderWriterLockSlimExtensions. Utility class for better management of the lifetime of the scope of <see cref="T:System.Threading.ReaderWriterLockSlim"/>
            </summary>
        </member>
        <member name="M:vm.Aspects.Threading.ReaderWriterLockSlimExtensions.UpgradableReaderLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the upgradable reader slim sync. Merely a shortcut to <c>new UpgradeableReaderSlimLock(readerWriterLock)</c>.
            </summary>
            <param name="readerWriterLock">
            The reader writer lock.
            </param>
            <returns>
            <see cref="T:vm.Aspects.Threading.UpgradeableReaderSlimSync"/> object.</returns>
            <example>
            <code>
            <![CDATA[
            class Protected
            {
                static ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);
                static Dictionary<string, string> _protected = new Dictionary<string, string>();
                
                public void Add(string key, string value)
                {
                    using(_lock.UpgradableReaderLock())
                    {
                        string v;
                        if (_protected.TryGetValue(key, out v))
                            throw ArgumentException("The key already exists.", "key");
                        
                        using(_loc.WriterLock())
                            _protected.Add(key, value);
                    }
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:vm.Aspects.Threading.ReaderWriterLockSlimExtensions.ReaderLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the reader slim sync. Mere of a shortcut to <c>new ReaderSlimSync(readerWriterLock)</c> however shows nicely in intellisense.
            </summary>
            <param name="readerWriterLock">The reader writer lock.</param>
            <returns><see cref="T:vm.Aspects.Threading.ReaderSlimSync"/> object.</returns>
            <example>
            <code>
            <![CDATA[
            class Protected
            {
                static ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);
                static Dictionary<string, string> _protected = new Dictionary<string, string>();
                
                public string Get(string key)
                {
                    using(_lock.ReaderLock())
                        return _protected.GetValue[key];
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:vm.Aspects.Threading.ReaderWriterLockSlimExtensions.WriterLock(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Gets the reader slim sync. Mere of a shortcut to <c>new WriterSlimSync(readerWriterLock)</c> however shows nicely in intellisense.
            </summary>
            <param name="readerWriterLock">The reader writer lock.</param>
            <returns><see cref="T:vm.Aspects.Threading.WriterSlimSync"/> object.</returns>
            <example>
            <code>
            <![CDATA[
            class Protected
            {
                static ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);
                static Dictionary<string, string> _protected = new Dictionary<string, string>();
                
                public string Get(string key)
                {
                    using(_lock.WriterLock())
                        return _protected.GetValue[key];
                }
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:vm.Aspects.Threading.UpgradeableReaderSlimSync">
            <summary>
            With the help of this class the developer can create a synchronized reader upgradeable to writer scope by utilizing the <c>using</c> statement.
            </summary>
            <example>
            <code>
            <![CDATA[
            class Protected
            {
                static ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);
                static Dictionary<string, string>; _protected = new Dictionary<string, string>();
                
                public void Add(string key, string value)
                {
                    using(new UpgradeableReaderSlimSync(_lock))
                    {
                        string v;
                        if (_protected.TryGetValue(key, out v))
                            throw ArgumentException("The key already exists.", "key");
                        
                        using(new WriterSlimSync(_lock))
                            _protected.Add(key, value);
                    }
                }
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:vm.Aspects.Threading.ReaderSlimSync"/>, <seealso cref="T:vm.Aspects.Threading.WriterSlimSync"/>
        </member>
        <member name="M:vm.Aspects.Threading.UpgradeableReaderSlimSync.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:vm.Aspects.Threading.WriterSlimSync"/> class with the specified <paramref name="readerWriterLock"/> and
            waits indefinitely until it acquires the lock in upgradable reader mode.
            </summary>
            <param name="readerWriterLock">The reader writer lock.</param>
        </member>
        <member name="F:vm.Aspects.Threading.UpgradeableReaderSlimSync._disposed">
            <summary>
            The flag will be set when the object gets disposed.
            </summary>
            <value>
            0 - if the object is not disposed yet, any other value would mean that the object is already disposed.
            </value>
        </member>
        <member name="P:vm.Aspects.Threading.UpgradeableReaderSlimSync.IsDisposed">
            <summary>
            Returns <see langword="true"/> if the object has already been disposed, otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:vm.Aspects.Threading.UpgradeableReaderSlimSync.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:vm.Aspects.Threading.WriterSlimSync">
            <summary>
            With the help of this class the developer can create a synchronized writer scope by utilizing the <c>using</c> statement.
            </summary>
            <example>
            <code>
            <![CDATA[
            class Protected
            {
                static ReaderWriterLockSlim _lock = new ReaderWriterLockSlim(LockRecursionPolicy.SupportsRecursion);
                static Dictionary<string, string> _protected = new Dictionary<string, string>();
                
                public void Add(string key, string value)
                {
                    using(new WriterSlimSync(_loc))
                        _protected[key] = value;
                }
            }
            ]]>
            </code>
            </example>
            <seealso cref="T:vm.Aspects.Threading.ReaderSlimSync"/>, <seealso cref="T:vm.Aspects.Threading.WriterSlimSync"/>
        </member>
        <member name="M:vm.Aspects.Threading.WriterSlimSync.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            Initializes a new instance of the <see cref="T:vm.Aspects.Threading.WriterSlimSync"/> class with the specified <paramref name="readerWriterLock"/> and
            waits indefinitely till it acquires the lock in writer mode.
            </summary>
            <param name="readerWriterLock">The reader-writer lock.</param>
        </member>
        <member name="F:vm.Aspects.Threading.WriterSlimSync._disposed">
            <summary>
            The flag is being set when the object gets disposed.
            </summary>
            <value>
            0 - if the object is not disposed yet, any other value would mean that the object is already disposed.
            </value>
        </member>
        <member name="P:vm.Aspects.Threading.WriterSlimSync.IsDisposed">
            <summary>
            Returns <see langword="true"/> if the object has already been disposed, otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:vm.Aspects.Threading.WriterSlimSync.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
    </members>
</doc>
